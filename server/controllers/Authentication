const User = require('../models/User');
const jwt = require('jsonwebtoken');
const secretKey = 'HackCSBHackathon';


const register = async( req, res) => {
    const { Name , Email, Phone , Password, Address, UserType, Available, Community , CreationTime } = req.body;
    const count = await User.countDocuments();
    const UserID = count + 1;
    try {
        const user = await User.create({ UserID ,Name , Email, Phone , Password, Address, UserType, Available, Community , CreationTime});
        const payload = {
            UserID : user.UserID,
            Email: user.Email
        };
        const token = jwt.sign(payload, secretKey, { expiresIn: '1h'})
        res.status(201).json({ user , token });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}

// const login = async( req, res) => {
//     const { Email, Password } = req.body;
//     try {
//         const options = { maxTimeMS: 15000 };
//         const user = await User.findOne({ Email } , null , options);
//         if (user && user.Password === Password) {
//             res.status(200).json({ user });
//         } else {
//             res.status(401).json({ error: 'Invalid credentials' });
//         }
//     } catch (error) {
//         res.status(500).json({ error: error.message });
//     }
// }

// {
//     "Email":"tahmidulislamomi09@gmail.com",
//     "Password":"HackCSB@1"
// }

const login = async( req, res) => {
    const { Email , Password } = req.body;
    console.log(Email);
    console.log(Password);
    
    try {
        const user = await User.findOne({ Email });
        console.log(user.Password);
        console.log(user.Email);
        if (user && Password === user.Password) {
            const payload = {
                UserID : user.UserID,
                Address: user.Address
            };
            const token = jwt.sign(payload, secretKey, { expiresIn: '1h'})
            res.status(200).json({ user , token });
        } else {
            res.status(401).json({ error: 'Invalid credentials' });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}


module.exports = {
    register,
    login,
}